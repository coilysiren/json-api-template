# models.py contains all of the declarative models for our database.
#
# docs => https://docs.sqlalchemy.org/en/13/orm/tutorial.html


import sqlalchemy
import sqlalchemy.ext.declarative as sqlalchemy_declarative
from sqlalchemy import Boolean, Column, DateTime, Integer, String, func


# docs => https://docs.sqlalchemy.org/en/13/orm/tutorial.html#declare-a-mapping
Base = sqlalchemy_declarative.declarative_base()


class User(Base):
    __tablename__ = "users"

    # autogenerated fields
    user_id = Column(Integer, primary_key=True)

    # standard fields
    email = Column(String, nullable=False, default="")
    name = Column(String, nullable=False, default="")
    createTime = Column(DateTime, default=func.now())
    lastModified = Column(DateTime, onupdate=func.now())

    def __repr__(self):
        return f'<User(name="{self.name}", email="{self.email}")>'

    def update(self, data: dict):
        # TODO: typo annotation for returning self

        if data.get("email") is not None:
            self.email = data.get("email")

        if data.get("name") is not None:
            self.name = data.get("name")

        return self
