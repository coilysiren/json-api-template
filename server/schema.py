"""
schema.py contains all of the input and output schemas for our server

The schemas are all defined with marshmallow, which you can read about here
=> https://marshmallow.readthedocs.io/

ðŸš¨ Changing the keys on the schemas will change the inputs and outputs for our server.
ðŸš¨ So before you change the keys, please check that all of our clients are updated!
"""

import database.models as models
from marshmallow import Schema, fields, pre_load


class UserInputSchema(Schema):
    """
    UserInputSchema represents the schema that clients *input* into our server.
    So for example, it is the schema that you should respect when `POST`ing the server.
    """

    # required fields
    email = fields.Email(required=True)
    role = fields.Str(required=True)

    # optional fields
    familyName = fields.Str()
    givenName = fields.Str()
    smsUser = fields.Boolean(allow_none=True)

    def update_user(self, user: models.User, data: {}) -> models.User:
        """
        update_user takes in a user and schema data, and updates that user with the current schema data
        """
        user.email = data.get("email")
        user.role = data.get("role")
        user.familyName = data.get("familyName")
        user.givenName = data.get("givenName")
        user.smsUser = data.get("smsUser")
        return user


class UserOutputSchema(UserInputSchema):
    """
    UserOutputSchema represents the schema that clients recieve as *output* from our server.
    It has all of the values of the UserOutputSchema, with the addition of the autogenerated
    id field.

    When deserialized, it has output like so
    {
        id: 1234,
        email: lynncyrin@gmail.com,
        ...
    }
    """

    id = fields.Integer()

    @pre_load
    def preprocess(self, user: models.User, **kwargs) -> {}:
        """
        from_model takes in a user model, and creates the user output schema data
        """
        return {
            "id": user.id,
            "email": user.email,
            "role": user.role,
            "familyName": user.familyName,
            "givenName": user.givenName,
            "smsUser": user.smsUser,
        }


class UserQuerySchema(Schema):
    """
    UserQuerySchema represents the query string schema to use when making GET requests
    for our users endpoint.

    For example, given the request...
    GET /users?page=20&limit=10
              ^
              the schema defines the data from this point, and on.
    """

    page = fields.Integer(default=1)
    limit = fields.Integer(default=50)
    roles = fields.List(fields.String)
